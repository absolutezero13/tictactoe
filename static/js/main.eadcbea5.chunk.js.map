{"version":3,"sources":["Components/Square.tsx","Components/Board.tsx","Helper/helper.ts","App.tsx","index.tsx"],"names":["Square","clickSquare","square","i","onClick","className","Board","useState","Array","fill","squares","setSquares","activePlayer","setActivePlayer","roundWinner","setRoundWinner","roundNumber","setRoundNumber","player1Score","setPlayer1Score","player2Score","setPlayer2Score","gameWinner","setGameWinner","isDraw","setIsDraw","useEffect","console","log","aiMove","randomNum","Math","floor","random","setTimeout","prevNum","reset","xOrO","won","length","x","y","z","isRoundOver","prevScore","indexOf","id","prevSquares","map","style","color","marginRight","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qLAUeA,EARe,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,YAAaC,EAAgB,EAAhBA,OAAQC,EAAQ,EAARA,EACpD,OACE,qBAAKC,QAAS,kBAAMH,EAAYE,IAAIE,UAAU,SAA9C,SACGH,KC4JQI,EA7JS,WAAO,IAAD,EACEC,mBAAS,IAAIC,MAAM,GAAGC,KAAK,KAD7B,mBACrBC,EADqB,KACZC,EADY,OAEYJ,mBAAS,YAFrB,mBAErBK,EAFqB,KAEPC,EAFO,OAGUN,mBAAc,IAHxB,mBAGrBO,EAHqB,KAGRC,EAHQ,OAIUR,mBAAS,GAJnB,mBAIrBS,EAJqB,KAIRC,EAJQ,OAKYV,mBAAS,GALrB,mBAKrBW,EALqB,KAKPC,EALO,OAMYZ,mBAAS,GANrB,mBAMrBa,EANqB,KAMPC,EANO,OAOQd,mBAAiB,IAPzB,mBAOrBe,EAPqB,KAOTC,EAPS,OAQAhB,oBAAkB,GARlB,mBAQrBiB,EARqB,KAQbC,EARa,KAW5BC,qBAAU,YACJN,GAAgB,GAAKF,GAAgB,IAEnCK,EADJL,EAAeE,EACG,WACA,cAEnB,CAACN,IAIJY,qBAAU,WACRC,QAAQC,IAAId,GACZ,IAAMe,EAAS,SAATA,IACJ,GAAqB,aAAjBjB,IAAgCE,IAAgBU,EAAQ,CAC1D,IAAMM,EAAYC,KAAKC,MAAsB,EAAhBD,KAAKE,UAEP,KAAvBvB,EAAQoB,IACVpB,EAAQoB,GAAa,IACrBjB,EAAgB,aAEhBgB,MAINK,YAAW,kBAAML,MAAU,OAC1B,CAACjB,IAIJc,qBAAU,WACRC,QAAQC,IAAId,GACRA,IAAgBQ,GAAcF,EAAe,GAAKF,EAAe,GACnEgB,YAAW,WACTjB,GAAe,SAACkB,GAAD,OAAaA,EAAU,KACtCC,MACC,OAEJ,CAACtB,IAIJY,qBAAU,WACR,IAAMW,ECzDiB,SAAC3B,GAW1B,IAVA,IAAM4B,EAAM,CACV,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEAnC,EAAI,EAAGA,EAAImC,EAAIC,OAAQpC,IAAK,CAAC,IAAD,cACjBmC,EAAInC,GADa,GAC5BqC,EAD4B,KACzBC,EADyB,KACtBC,EADsB,KAEnC,GAAIhC,EAAQ8B,IAAM9B,EAAQ8B,KAAO9B,EAAQ+B,IAAM/B,EAAQ+B,KAAO/B,EAAQgC,GACpE,OAAOhC,EAAQ8B,GAGnB,OAAO,KDwCQG,CAAYjC,IAErB2B,GAASvB,GAAgBQ,IACd,MAATe,GACFlB,GAAgB,SAACyB,GAAD,OAAeA,EAAY,KAEhC,MAATP,GACFhB,GAAgB,SAACuB,GAAD,OAAeA,EAAY,KAE7C7B,EAAesB,MAEhB,CAACzB,IAIJc,qBAAU,YACqB,IAAzBhB,EAAQmC,QAAQ,KAAe/B,IACjCW,GAAU,GACVS,YAAW,WACTE,MACC,QAEJ,CAAC1B,IAIJ,IAAMT,EAAc,SAAC6C,GAEhBpC,EAAQoC,IACRhC,GACAQ,GACgB,aAAjBV,IAEAD,GAAW,SAACoC,GACV,OAAOA,EAAYC,KAAI,SAAC9C,EAAQC,GAI9B,OAHIA,IAAM2C,IACR5C,EAAS,KAEJA,QAGXW,EAAgB,cAMduB,EAAQ,WACZrB,EAAe,IACfJ,EAAW,IAAIH,MAAM,GAAGC,KAAK,KAC7BI,EAAgB,YAChBY,GAAU,IAaZ,OACE,sBAAKpB,UAAU,QAAf,UACE,wCAAWW,KACX,sBAAKX,UAAU,eAAf,UACE,2CAAmB,IACnB,qBAAI4C,MAAO,CAAEC,MAAO,OAApB,UACGhC,EADH,MACoBE,KAEpB,6CAEF,qBAAKf,UAAU,oBAAf,SACGK,EAAQsC,KAAI,SAAC9C,EAAQC,GACpB,OACE,cAAC,EAAD,CAAQF,YAAaA,EAAaC,OAAQA,EAAgBC,EAAGA,GAANA,QAI7D,mBACE8C,MAAO,CACLE,YAA8B,aAAjBvC,EAA8B,QAAU,UAFzD,UAKIE,GAAeF,EAAe,YAElC,4BACGE,IACEQ,IACgB,MAAhBR,EACG,0BACgB,MAAhBA,EACA,0BACA,QAEPU,GAAU,uCACVF,GAAc,kCAAKA,EAAL,oBACf,wBAAQlB,QA3CI,WACdgC,IACAnB,EAAe,GACfE,EAAgB,GAChBE,EAAgB,GAChBE,EAAc,KAsCZ,2BEjJS6B,EARO,WACpB,OACE,qBAAK/C,UAAU,MAAf,SACE,cAAC,EAAD,O,MCFNgD,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.eadcbea5.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Square: React.FC<any> = ({ clickSquare, square, i }) => {\r\n  return (\r\n    <div onClick={() => clickSquare(i)} className=\"square\">\r\n      {square}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Square;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { isRoundOver } from \"../Helper/helper\";\r\nimport Square from \"./Square\";\r\n\r\nconst Board: React.FC = () => {\r\n  const [squares, setSquares] = useState(new Array(9).fill(\"\"));\r\n  const [activePlayer, setActivePlayer] = useState(\"Player 1\");\r\n  const [roundWinner, setRoundWinner] = useState<any>(\"\");\r\n  const [roundNumber, setRoundNumber] = useState(1);\r\n  const [player1Score, setPlayer1Score] = useState(0);\r\n  const [player2Score, setPlayer2Score] = useState(0);\r\n  const [gameWinner, setGameWinner] = useState<string>(\"\");\r\n  const [isDraw, setIsDraw] = useState<boolean>(false);\r\n\r\n  // GAME END\r\n  useEffect(() => {\r\n    if (player2Score >= 3 || player1Score >= 3) {\r\n      player1Score > player2Score\r\n        ? setGameWinner(\"Player 1\")\r\n        : setGameWinner(\"Player 2\");\r\n    }\r\n  }, [roundWinner]);\r\n\r\n  // Recursive AI move\r\n\r\n  useEffect(() => {\r\n    console.log(roundWinner);\r\n    const aiMove = (): any => {\r\n      if (activePlayer === \"Player 2\" && !roundWinner && !isDraw) {\r\n        const randomNum = Math.floor(Math.random() * 9);\r\n\r\n        if (squares[randomNum] === \"\") {\r\n          squares[randomNum] = \"O\";\r\n          setActivePlayer(\"Player 1\");\r\n        } else {\r\n          aiMove();\r\n        }\r\n      }\r\n    };\r\n    setTimeout(() => aiMove(), 500);\r\n  }, [activePlayer]);\r\n\r\n  // NEXT ROUND\r\n\r\n  useEffect(() => {\r\n    console.log(roundWinner);\r\n    if (roundWinner && !gameWinner && player2Score < 3 && player1Score < 3) {\r\n      setTimeout(() => {\r\n        setRoundNumber((prevNum) => prevNum + 1);\r\n        reset();\r\n      }, 2000);\r\n    }\r\n  }, [roundWinner]);\r\n\r\n  // ROUND END\r\n\r\n  useEffect(() => {\r\n    const xOrO = isRoundOver(squares);\r\n\r\n    if (xOrO && !roundWinner && !gameWinner) {\r\n      if (xOrO === \"X\") {\r\n        setPlayer1Score((prevScore) => prevScore + 1);\r\n      }\r\n      if (xOrO === \"O\") {\r\n        setPlayer2Score((prevScore) => prevScore + 1);\r\n      }\r\n      setRoundWinner(xOrO);\r\n    }\r\n  }, [activePlayer]);\r\n\r\n  // DRAW\r\n\r\n  useEffect(() => {\r\n    if (squares.indexOf(\"\") === -1 && !roundWinner) {\r\n      setIsDraw(true);\r\n      setTimeout(() => {\r\n        reset();\r\n      }, 2000);\r\n    }\r\n  }, [squares]);\r\n\r\n  //CLÄ°CK FUNC\r\n\r\n  const clickSquare = (id: number): void => {\r\n    if (\r\n      !squares[id] &&\r\n      !roundWinner &&\r\n      !gameWinner &&\r\n      activePlayer === \"Player 1\"\r\n    ) {\r\n      setSquares((prevSquares) => {\r\n        return prevSquares.map((square, i) => {\r\n          if (i === id) {\r\n            square = \"X\";\r\n          }\r\n          return square;\r\n        });\r\n      });\r\n      setActivePlayer(\"Player 2\");\r\n    }\r\n  };\r\n\r\n  // ROUND RESET\r\n\r\n  const reset = () => {\r\n    setRoundWinner(\"\");\r\n    setSquares(new Array(9).fill(\"\"));\r\n    setActivePlayer(\"Player 1\");\r\n    setIsDraw(false);\r\n  };\r\n\r\n  // GAME RESET\r\n\r\n  const newGame = () => {\r\n    reset();\r\n    setRoundNumber(1);\r\n    setPlayer1Score(0);\r\n    setPlayer2Score(0);\r\n    setGameWinner(\"\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"board\">\r\n      <h2>Round {roundNumber}</h2>\r\n      <div className=\"board__score\">\r\n        <h1>Player 1 </h1>{\" \"}\r\n        <h2 style={{ color: \"red\" }}>\r\n          {player1Score} : {player2Score}\r\n        </h2>\r\n        <h1>Player 2</h1>\r\n      </div>\r\n      <div className=\"board__game-field\">\r\n        {squares.map((square, i) => {\r\n          return (\r\n            <Square clickSquare={clickSquare} square={square} key={i} i={i} />\r\n          );\r\n        })}\r\n      </div>\r\n      <p\r\n        style={{\r\n          marginRight: activePlayer === \"Player 1\" ? \"250px\" : \"-250px\",\r\n        }}\r\n      >\r\n        {!roundWinner && activePlayer + \"'s turn\"}\r\n      </p>\r\n      <p>\r\n        {roundWinner &&\r\n          !gameWinner &&\r\n          (roundWinner === \"X\"\r\n            ? \"Player 1 Wins the Round\"\r\n            : roundWinner === \"O\"\r\n            ? \"Player 2 Wins the Round\"\r\n            : null)}\r\n      </p>\r\n      {isDraw && <p>Draw !</p>}\r\n      {gameWinner && <p> {gameWinner} won the Game </p>}\r\n      <button onClick={newGame}> NEW GAME</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Board;\r\n","export const isRoundOver = (squares: String[]) => {\r\n  const won = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6],\r\n  ];\r\n  for (let i = 0; i < won.length; i++) {\r\n    const [x, y, z] = won[i];\r\n    if (squares[x] && squares[x] === squares[y] && squares[y] === squares[z]) {\r\n      return squares[x];\r\n    }\r\n  }\r\n  return null;\r\n};\r\n","import React from \"react\";\nimport Board from \"./Components/Board\";\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <Board />\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./Sass/main.scss\";\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}